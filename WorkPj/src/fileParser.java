import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

public class fileParser {
    private static FileReader fr;  //Create private fileParser. This should only be used by this class

    /**
     * Initialize fileParser with a fileReader
     * @param filereader FileReader passed in to be used by the fileParser.
     */
    public fileParser(FileReader filereader) {
        this.fr = filereader; //sets the FileReader to the passed in value
    }

    /**
     * Initialize fileParser by passing in a file.
     * The file will be used by the FileReader to read words from it.
     * @param file file that will be manipulated by the fileParser
     */
    public fileParser(File file) {
        try {                       //Try/catch to make sure file exists
            this.fr = new FileReader(file);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    /**
     * Initialize fileParser by passing in the name of a file.
     * @param name The name of the file the fileParser will manipulate.
     */
    public fileParser(String name) {
        try {                           //Try/catch to make sure file with given name exists
            this.fr = new FileReader(name);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    /**
     * Method used to extract words from a file. The method goes character by character building a word in the process.
     * The method is designed to work with CSV file, so each word in the file is separated by commas.
     * The word parser ignores commas and newlines, and includes spaces.
     * @return Returns the word generated or null if an error occurred or the end of the file was reached.
     */
    public static String getNextWord()
    {
        int c = read();  //receives the next character (ascii value) of the file
        String word = "";  //create an empty word that will be concatenated later.
        if(c == 13 || c == 10)  //If the character is a new line, keep reading until a new character is found
            c = read();
        while(c != -1 && c != 44 && c != 13) {  //loop to concatenate characters into a word until a comma(44),
                                                //newline(13), or the end of the file is reached(-1)
            word += (char)c; //Added character to the end of the file
            c = read();  //Read next character for evaluation
        }
        if(c == -1 && word == "")  //If the end of the file is reached, and the word is empty return null
        {
            return null;  //When null is returned, the parser has reached the end of the file
        }
        return word;  //Return word generated by the parser
    }

    /**
     * Simple method to read the next character of a file.
     * The character is ent as an ascii and should ber converted by the the caller
     * The Read method will return -1 at the end of the file
     * @return The ascii value of the next char in the file. Return -1 if an issue arises.
     */
    public static int read()
    {
        try {  //try/catch to detect IO errors
            return fr.read();  //Return the ascii value of a char, or -1 for the end of the file
        } catch (IOException e) {
            e.printStackTrace();
            return -1;
        }
    }

    /**
     * simple method to close the parser. This method closes the file reader to prevent IO errors
     * @return
     */
    public int close()
    {
        if(fr != null)  //check to make sure a file is opened
        {
            try {
                this.fr.close();  //close open file
                return 0;  //Return 0 for all clear
            } catch (IOException e) {  //If an error occurs, warn the user.
                e.printStackTrace();
                return -1;
            }
        }
        return 0;  //No file was open, so signal all clear
    }
}
