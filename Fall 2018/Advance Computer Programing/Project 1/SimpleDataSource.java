import java.sql.*;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

/**
   A simple data source for getting database connections. 
*/
public class SimpleDataSource
{
	/**
	 * Private strings need for the program to connect to the sql database
	 */
   private static String url;
   private static String username;
   private static String password;
   private static Connection conn;
   static Writer wr = new Writer("dbOperations.log");

   /**
    * Method that creates the table we will be using for this project.
    * @param tableName The name of the table we will create. This will be the class name
    * @param command  The create table command generated by the main class
    * @throws SQLException We will be connecting to a SQL database. If issues arise, we will nedd to catch them
    */
   public static void createDataTable(String tableName, String command) throws SQLException {
      if(tableName == "")  //Checks to make sure a table name is given. The table name can not be empty
      {
         System.out.println("Please provide a table name");
         return;
      }

      else
      {
         try {
            Initiate("database.properties");          //Initializes the database properties
         } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
         }
      }
      try {
       SimpleDataSource.getConnection();    //Opens up the connection to the database
      } catch (SQLException e) {
         e.printStackTrace();
      }

      dropTable(tableName);   //Drops previously created database
      Statement stat = conn.createStatement();  //Creates a statement object to execute code
      stat.execute(command);  //Executes a SQL command to create the database
      stat.close();  //Closes the statement in case we don't use it again
      wr.startNew("Table " + tableName + " was created\n\nAttempt to add new entries\n-------------------\n");
   }

   public static boolean addEntry(String command) throws SQLException {
       try {
          Statement stat = conn.createStatement();
           stat.execute(command);   //Runs an insert query to the SQL database
           stat.close();  //Closes the statement in case we don't use it again
           wr.add("++Success : Program added new entry Successfully\n");
            return true;
       } catch (SQLException e) {
           e.printStackTrace();
           wr.add("EROOR ADDING ENTRY");
           return false;
       }
   }

   
   /**
    * This method prints out the resulting table created for the program. 
    * This method can be added to or removed depending on what the user would like to query
    * The current Queries are 
    * Show all values on a table
    * Show only Chevy and Toyota
    * Show vehicles over 2500 pounds
    * @param table Table name (class name)
    * @throws SQLException
    */
public static boolean viewFullTable(String table) throws SQLException {
   Statement stat = conn.createStatement();
   try {
       System.out.println("All vehicles in the database");
       
      ResultSet result = stat.executeQuery("SELECT * FROM "+ table);  //Query to display all value in the database table
      ResultSetMetaData rsm = result.getMetaData();
      int cols = rsm.getColumnCount();
      wr.add("\nPrint all entries of the database\n");
      while (result.next()) {   //Loop to print the results to the screen
         for (int i = 1; i <= cols; i++)
            System.out.print(result.getString(i) + " ");
         System.out.println("");
      }
   }
   catch (Exception e)
   {
      System.out.println("No Results");  //If the table is empty or and error occurs, the user is notified
      wr.add("Table not found : " + table + "\n");
      return false;

   }
   
   try {
       System.out.println("\n Only Chevy and Toyotas");
       wr.add("Retireved Only Chevy and Toyotas vehicle\n");
      ResultSet result = stat.executeQuery("SELECT * FROM "+ table + " WHERE Make = 'Chevy' OR Make = 'Toyota'");  //Query to display only Chevy and Toyota vehicles
      ResultSetMetaData rsm = result.getMetaData();
      int cols = rsm.getColumnCount();
      while (result.next()) {          //Print the result to screen
         for (int i = 1; i <= cols; i++)
            System.out.print(result.getString(i) + " ");
         System.out.println("");
      }
   }
   catch (Exception e)
   {
      System.out.println("No Results");
      wr.add("Error retrieving information\n");
      return false;
   }
   
   try {
       System.out.println("\n Vehicles over 2500 pounds");
       wr.add("Retireved Only vehicles above 2500 pounds\n");
      ResultSet result = stat.executeQuery("SELECT * FROM "+ table + " WHERE Weight > 2500"); //Query to display vehicles that are over 2500 pounds
      ResultSetMetaData rsm = result.getMetaData();
      int cols = rsm.getColumnCount();
      while (result.next()) {  //print the resulting data to screen
         for (int i = 1; i <= cols; i++)
            System.out.print(result.getString(i) + " ");
         System.out.println("");
      }
   }
   catch (Exception e)
   {
      System.out.println("No Results");
      wr.add("Error retrieving information\n");
      return false;
   }
   stat.close();  //Closes the statement in case we don't use it again
   conn.close();  //Closes the connection to the database
   wr.add("\nDatabase connection closed\n");
   return true;
}

   /**
      Initializes the data source.
      @param fileName the name of the property file that 
   */
   public static void Initiate(String fileName)
         throws IOException, ClassNotFoundException
   {  
	   //Load the database properties from a file
      Properties props = new Properties();
      FileInputStream in = new FileInputStream(fileName);
      props.load(in);  

      //Retrieve needed information for the database
      String driver = props.getProperty("jdbc.driver");
      url = props.getProperty("jdbc.url");
      username = props.getProperty("jdbc.username");
      if (username == null) username = "";
      password = props.getProperty("jdbc.password");
      if (password == null) password = "";
      if (driver != null)
         Class.forName(driver);
   }

   /**
      Gets a connection to the database.
      @return the database connection
   */
   public static void getConnection() throws SQLException
   {
	   conn =  DriverManager.getConnection(url, username, password);  //returns the value of the database
   }

   /**
    * Drops a specific table
    * @param table The name of the table to drop
    * @throws SQLException
    */
   public static void dropTable(String table) throws SQLException {
      Statement stat = conn.createStatement();
       try {
         stat.execute("DROP TABLE " + table);  //Drop table command
         wr.add("Successfully connected to database\n");
      }
      catch (Exception e)
      {
          System.out.println("drop failed");  //If table is not found, tells the user
          wr.add("Table drop failed\n");
      }
   }
}











