#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX_PARAMS 20    //token can hold as many parameters as possible. For this project params will need to hold a max of 3.
#define PARAM_LENGTH 256  //For this project, I don't expect commands or names to be over 50 characters long.
#define MAXARGS 32

char* token;
char* params[MAXARGS];//[PARAM_LENGTH]; //@params is an array of arrays. It stores the command any other parameter it utilizes.
char* s = " \t\n"; //@s is used by strtok to split the string up. strtok looks for s and splits the char before
//and after s into different array locations in token.
char input[256];

typedef struct PARAM
{
	char *inputRedirect;           /* file name or NULL */
	char *outputRedirect;          /* file name or NULL */
	int  background;               /* either 0 (false) or 1 (true)*/
	int  argumentCount;            /* number of tokens in argument vector */
	char *argumentVector[MAXARGS]; /* array of strings */
}Param_t;

int main()
{
	Param_t p1;
	printf("$ ");                          //input line. reprints after each action
	fgets(input, sizeof(input), stdin);    //Retrieves user input and stores into input.
	token = strtok(input, s);              //Tokenizes input. Seperates by what is  in s.
	int i = 0;                             //i keeps count of the number of parameters inserted
	while(token != NULL)
	{
		/*if(token[0] == '<')
		{
			printf("<");
			p1.inputRedirect = token + 1;
			token = strtok(NULL, s);//Continues to add phrases until it reaches the end of the sentence
		}
		if(token[0] == '>')
		{
			printf(">");
			p1.outputRedirect = token + 1;
			token = strtok(NULL, s);           //Continues to add phrases until it reaches the end of the sentence
		}
		else
		{*/
			params[i] = token;
			i++;
			token = strtok(NULL, s);           //Continues to add phrases until it reaches the end of the sentence
		//}
	}
	int x;
	for(x = 0; x<i;x++)
	{
		//p1.argumentVector[x] = params[x];
		//printf("Arg :%i %s\n",x, p1.argumentVector[x]);
	}

	//return p1;
}




/*Function for printing out the params.*/
void printParams(Param_t * param)
{
	int i;
	printf ("InputRedirect: [%s]\n",
			(param->inputRedirect != NULL)?param->inputRedirect:"NULL");
	printf ("OutputRedirect: [%s]\n",
			(param->outputRedirect != NULL)?param->outputRedirect:"NULL");
	printf ("Background: [%d]\n", param->background);
	printf ("ArgumentCount: [%d]\n", param->argumentCount);
	for (i = 0; i < param->argumentCount; i++)
	{
		printf("ArgumentVector[%2d]: [%s]\n", i, param->argumentVector[i]);
	}

}
