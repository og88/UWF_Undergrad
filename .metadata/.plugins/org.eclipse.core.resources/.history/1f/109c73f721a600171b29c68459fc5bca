/*
 * Parse.h
 *
 *  Created on: Sep 30, 2017
 *      Author: omarg
 */

#ifndef PARSE_H_
#define PARSE_H_

#define PARAM_LENGTH 256  //For this project, I don't expect commands or names to be over 50 characters long.
#define MAXARGS 32

char* token;
char* s = " \t\n\0"; //@s is used by strtok to split the string up. strtok looks for s and splits the char before
//and after s into different array locations in token.
char input[PARAM_LENGTH];


typedef struct PARAM
{
	char *inputRedirect;           /* file name or NULL */
	char *outputRedirect;          /* file name or NULL */
	int  background;               /* either 0 (false) or 1 (true)*/
	int  argumentCount;            /* number of tokens in argument vector */
	char *argumentVector[MAXARGS]; /* array of strings */
}Param_t;

Param_t* param(int argc);
void printParams(Param_t * param);

/*Param_t* param(int argc)
{

printf("$ ");                          //input line. reprints after each action

	fgets(input, sizeof(input), stdin);    //Retrieves user input and stores into input.
	token = strtok(input, s);              //Tokenizes input. Seperates by what is  in s.
	Param_t* p1 = malloc(sizeof(Param_t));
	int i = 0;                             //i keeps count of the number of parameters inserted
	while(token != NULL)
	{

		if(token[0] == '<')
		{
			printf("<");
			p1->inputRedirect = token + 1;
			token = strtok(NULL, s);//Continues to add phrases until it reaches the end of the sentence
		}
		if(token[0] == '>')
		{
			printf(">");
			p1->outputRedirect = token + 1;
			token = strtok(NULL, s);           //Continues to add phrases until it reaches the end of the sentence
		}
		else
		{
		p1->argumentVector[i] = token;
			i++;

			token = strtok(NULL, s);           //Continues to add phrases until it reaches the end of the sentence
		}


	}
	p1->argumentCount = i;
	printf("\nCount %i\n", p1->argumentCount);
if(argc == 1)
{
	printParams(p1);
}
	return p1;

}

void printParams(Param_t * param)
{
	int i;
	printf ("InputRedirect: [%s]\n",
			(param->inputRedirect != NULL)?param->inputRedirect:"NULL");
	printf ("OutputRedirect: [%s]\n",
			(param->outputRedirect != NULL)?param->outputRedirect:"NULL");
	printf ("Background: [%d]\n", param->background);
	printf ("ArgumentCount: [%d]\n", param->argumentCount);
	for (i = 0; i < param->argumentCount; i++)
	{
		printf("ArgumentVector[%2d]: [%s]\n", i, param->argumentVector[i]);
	}

}
*/
#endif /* PARSE_H_ */
