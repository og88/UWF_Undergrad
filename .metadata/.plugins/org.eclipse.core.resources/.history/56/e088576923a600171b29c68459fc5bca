#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "Parse.h"


int main(int argc, char* argv[])
{
	pid_t pidc;  //Child pid number
	int status = 0;              //Status returned by child. used in wait
	while (status == 0)          //Status will return 0 if exec runs currectly. If user inputs "exit" int to command line,
	{                            //The program will end.
		if((pidc = fork()) < 0)  //Checks to make sure our fork() runs
		{
			perror("fork failure");
			exit(1);
		}

		if(pidc == 0)
		{
			Param_t* p1 = malloc(sizeof(Param_t));
			if(argc > 1)
			{
				if(strcmp(argv[1], "-Debug") == 0)
				{
					p1 = param(1);
				}
			}
			else
			{
				p1 = param(0);
			}
			printf("%s", p1->argumentVector[0]);
			/*These are the if else statements that run the appropriate actions the user asks for.
				 /* They all work in similar ways.*/
			if(strcmp(p1->argumentVector[0], "exit") == 0)
			{
				_exit(1);
			}
			else if(strcmp(p1->argumentVector[0], "cd") == 0)
			{
				chdir(p1->argumentVector[1]);
				_exit(0);
			}
			else
			{
				execvp(p1->argumentVector[0],p1->argumentVector);
				exit(2);
			}
			/*These are the if else statements that run the appropriate actions the user asks for.
	 /* They all work in similar ways.*/
			/*
			 *
			 *





			else if(strcmp(params[0], "grep") == 0)
			{
				execvp("grep",params);

			}

			 */
		}
		else
		{
			wait(&status);
			if(WEXITSTATUS(status) == 2)
			{
				printf("\nINVALID COMMAND\n");
				status = 0;
			}
			else if(WEXITSTATUS(status) == 0)
			{
				status = 0;
			}
			printf("\n status is %i\n",	WEXITSTATUS(status));
		}
	}
	return 0;
}
