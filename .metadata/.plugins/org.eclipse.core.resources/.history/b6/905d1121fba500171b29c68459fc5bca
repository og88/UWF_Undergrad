#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX_PARAMS 20    //token can hold as many parameters as possible. For this project params will need to hold a max of 3.
#define PARAM_LENGTH 256  //For this project, I don't expect commands or names to be over 50 characters long.
#define MAXARGS 32

char* token;
char* params[MAXARGS];//[PARAM_LENGTH]; //@params is an array of arrays. It stores the command any other parameter it utilizes.
char* s = " \n"; //@s is used by strtok to split the string up. strtok looks for s and splits the char before
//and after s into different array locations in token.
char input[256];

typedef struct PARAM
{
	char *inputRedirect;           /* file name or NULL */
	char *outputRedirect;          /* file name or NULL */
	int  background;               /* either 0 (false) or 1 (true)*/
	int  argumentCount;            /* number of tokens in argument vector */
	char *argumentVector[MAXARGS]; /* array of strings */
}Param_t;

Param_t main()
{
	Param_t p1;
	printf("$ ");                          //input line. reprints after each action
	fgets(input, sizeof(input), stdin);    //Retrieves user input and stores into input.
	token = strtok(input, s);              //Tokenizes input. Seperates by what is  in s.
	int i = 0;                             //i keeps count of the number of parameters inserted
	while(token != NULL)
	{
		strcpy(params[i], token); //copes seperated phrase into params
		//params[i] = token;
		token = strtok(NULL, s);           //Continues to add phrases until it reaches the end of the sentence
		i++;                               //increments i to keep count of the inputs

	}
	int x;
	for(x = 0; x<i;x++)
	{
		p1.argumentVector[x] = params[x];
	}
}

/*These are the if else statements that run the appropriate actions the user asks for.
 * They all work in similar ways.*/
/*if (strcmp(params[0],"ls") == 0)
			{
				execvp("ls",params);
			}
			else if(strcmp(params[0], "cp") == 0)
			{
				execvp("cp",params);
			}
			else if(strcmp(params[0], "man") == 0)
			{
				execvp("man",params);
			}
			else if(strcmp(params[0], "pwd") == 0)
			{
				execvp("pwd",params);
			}

			else if(strcmp(params[0], "cd") == 0)
			{
				//int chdir(params[1]);
			}
			else if(strcmp(params[0], "mkdir") == 0)
			{
				execvp("mkdir",params);
			}
			else if(strcmp(params[0], "mv") == 0)
			{
				execvp("mv",params);
			}
			else if(strcmp(params[0], "chmod") == 0)
			{
				execvp("chmod",params);
			}
			else if(strcmp(params[0], "chown") == 0)
			{
				execvp("chown",params);
			}
			else if(strcmp(params[0], "rm") == 0)
			{
				execvp("rm",params);
			}
			else if(strcmp(params[0], "cat") == 0)
			{
				execvp("cat",params);
			}
			else if(strcmp(params[0], "grep") == 0)
			{
				execvp("grep",params);

			}
			else if(strcmp(params[0], "wget") == 0)
			{
				execvp("wget",params);
			}
			else if(strcmp(params[0], "tail") == 0)
			{
				execvp("tail",params);
			}
			else if(strcmp(params[0], "w") == 0)
			{
				execvp("w",params);
			}
			else if(strcmp(params[0], "exit") == 0)
			{
				exit(1);
			}
			else
			{
				printf("invalid Command\n");
				_exit(0);
			}
	}
	else
	{
		wait(&status);
		//printf("%i", status);            //Print statement to see if program is running right
	}
}*/



/*Function for printing out the params.*/
void printParams(Param_t * param)
{
	int i;
	printf ("InputRedirect: [%s]\n",
			(param->inputRedirect != NULL)?param->inputRedirect:"NULL");
	printf ("OutputRedirect: [%s]\n",
			(param->outputRedirect != NULL)?param->outputRedirect:"NULL");
	printf ("Background: [%d]\n", param->background);
	printf ("ArgumentCount: [%d]\n", param->argumentCount);
	for (i = 0; i < param->argumentCount; i++)
	{
		printf("ArgumentVector[%2d]: [%s]\n", i, param->argumentVector[i]);
	}

}
