#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "Parse.h"

//typedef struct PARAM
//{
//	char *inputRedirect;           /* file name or NULL */
//	char *outputRedirect;          /* file name or NULL */
//	int  background;               /* either 0 (false) or 1 (true)*/
//	int  argumentCount;            /* number of tokens in argument vector */
//	char *argumentVector[MAXARGS]; /* array of strings */
//}Param_t;


int main()
{
	pid_t pidc;                  //Child pid number
	int status = 0;              //Status returned by child. used in wait
	while (status == 0)          //Status will return 0 if exec runs currectly. If user inputs "exit" int to command line,
	{                            //The program will end.
		if((pidc = fork()) < 0)  //Checks to make sure our fork() runs
		{
			perror("fork failure");
			exit(1);
		}

		if(pidc == 0)
		{
			Param_t p1 = param();
			char* argv[p1.argumentCount];
			printf("%s", p1.argumentVector[0]);
			printf("%i\n",p1.argumentCount)
			int x;
			for(x = 0; x < p1.argumentCount; x++)
			{
				argv[x] = p1.argumentVector[x];
			}
			/*These are the if else statements that run the appropriate actions the user asks for.
				 /* They all work in similar ways.*/
			if(strcmp(p1.argumentVector[0], "exit") == 0)
			{
				_exit(1);
			}
			else if(strcmp(p1.argumentVector[0], "cd") == 0)
			{
				chdir(p1.argumentVector[1]);
				_exit(0);
			}
			else
			{
				execvp(argv[0],argv);
				exit(2);
			}
			/*These are the if else statements that run the appropriate actions the user asks for.
	 /* They all work in similar ways.*/
			/*
			 *
			 *





			else if(strcmp(params[0], "grep") == 0)
			{
				execvp("grep",params);

			}

			 */
		}
		else
		{
			wait(&status);
			if(WEXITSTATUS(status) == 2)
			{
				printf("\nINVALID COMMAND\n");
				status = 0;
			}
			else if(WEXITSTATUS(status) == 0)
			{
				status = 0;
			}
			printf("\n status is %i\n",	WEXITSTATUS(status));
		}
	}
	return 0;
}
