/*
 * Parse.h
 *
 *  Created on: Sep 30, 2017
 *      Author: omarg
 */

#ifndef PARSE_H_
#define PARSE_H_

typedef struct PARAM
{
	char *inputRedirect;           /* file name or NULL */
	char *outputRedirect;          /* file name or NULL */
	int  background;               /* either 0 (false) or 1 (true)*/
	int  argumentCount;            /* number of tokens in argument vector */
	char *argumentVector[MAXARGS]; /* array of strings */
}Param_t;


Param_t param(void)
{
	Param_t p1;
		printf("$ ");                          //input line. reprints after each action
		fgets(input, sizeof(input), stdin);    //Retrieves user input and stores into input.
		token = strtok(input, s);              //Tokenizes input. Seperates by what is  in s.
		int i = 0;                             //i keeps count of the number of parameters inserted
		while(token != NULL)
		{
			if(token[0] == '<')
			{
				printf("<");
				p1.inputRedirect = token + 1;
				token = strtok(NULL, s);//Continues to add phrases until it reaches the end of the sentence
			}
			if(token[0] == '>')
			{
				printf(">");
				p1.outputRedirect = token + 1;
				token = strtok(NULL, s);           //Continues to add phrases until it reaches the end of the sentence
			}
			else
			{
				params[i] = token;
				i++;
				token = strtok(NULL, s);           //Continues to add phrases until it reaches the end of the sentence
			}
		}
		int x;
		for(x = 0; x<i;x++)
		{
			p1.argumentVector[x] = params[x];
			printf("Arg :%i %s\n",x, p1.argumentVector[x]);
		}
		return p1;
}

#endif /* PARSE_H_ */
