import javafx.scene.control.Label;
import java.util.concurrent.TimeUnit;
import java.util.zip.Inflater;
import javafx.application.Application;
import javafx.concurrent.Task;
import javafx.concurrent.WorkerStateEvent;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;
import javafx.scene.Group;
import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.HBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;


public class JavaLeagueTactics
{
	static void main()
	{
		SplashView.main(null);
		Menu();
	}
	/**
	 * <!-- begin-user-doc -->
	 * <!--  end-user-doc  -->
	 * @generated
	 */
	public JavaLeagueTactics(){
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!--  end-user-doc  -->
	 * @generated
	 * @ordered
	 */

	public static void Menu() {
		Menu.launch();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!--  end-user-doc  -->
	 * @generated
	 * @ordered
	 */

	public static void Playermove(final Scene scene, final Button btn, final Button btn0, final Label lbl, final Round r) {
		EventHandler<KeyEvent> j = new EventHandler<KeyEvent>() {
			@Override
			public void handle(KeyEvent event) {
				KeyCode k = event.getCode();
				switch (k) {
				case UP:   btn.setLayoutY(btn.getLayoutY() - 10); scene.setOnKeyPressed(null); enemyTurn(scene, btn, btn0, lbl, r); break;
				case DOWN: btn.setLayoutY(btn.getLayoutY() + 10); scene.setOnKeyPressed(null);enemyTurn(scene, btn, btn0, lbl, r); break;
				case LEFT: btn.setLayoutX(btn.getLayoutX() - 10); scene.setOnKeyPressed(null);enemyTurn(scene, btn, btn0, lbl, r); break;
				case RIGHT:btn.setLayoutX(btn.getLayoutX() + 10); scene.setOnKeyPressed(null);enemyTurn(scene, btn, btn0, lbl, r); break;
				case SHIFT:btn.setLayoutX(150); btn.setLayoutY(150); scene.setOnKeyPressed(null);enemyTurn(scene, btn, btn0, lbl, r); break;
				}
				if((((btn.getLayoutX() - btn0.getLayoutX()) < 70) && ((btn.getLayoutX() - btn0.getLayoutX()) > -70))
						&& (((btn.getLayoutY() - btn0.getLayoutY()) < 40) && ((btn.getLayoutY() - btn0.getLayoutY()) > -40)))
				{
					final int h = Integer.parseInt(lbl.getText()) - 1;
					lbl.setText(Integer.toString(h));	
				}
			}
		};
		scene.setOnKeyPressed(j);
	}
	public static void Game(final Stage stage, final Button btn, final Button btn0) throws InterruptedException
	{
		stage.setTitle("Game");	
		final Label lbl = new Label();
		final Label lbl1 = new Label();
		int hp = 100;

		lbl.setText(Integer.toString(hp));
		lbl.setLayoutX(10);
		lbl.setLayoutY(10);
		Group root = new Group();

		btn.setLayoutX(115);
		btn.setLayoutY(50);

		btn0.setLayoutX(350);
		btn0.setLayoutY(100);

		root.getChildren().add(btn);
		root.getChildren().add(btn0);
		root.getChildren().add(lbl);
		root.getChildren().add(lbl1);
		final Round r = new Round();
		Scene scene = new Scene(root, 480, 480);

		btn.setText("Player");
		btn.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
			}
		});

		btn0.setText("Enemy");

		stage.setScene(scene);
		stage.show();		
		playerTurn(scene, btn, btn0, lbl, r);

	}
	public static void playerTurn(final Scene scene, final Button btn, final Button btn0, final Label lbl, final Round r)
	{
	Playermove(scene, btn, btn0, lbl, r);
	}
	public static void enemyTurn(final Scene scene, final Button btn, final Button btn0, final Label lbl, final Round r)
	{
		System.out.println("Enemy Turn");
		playerTurn(scene, btn, btn0, lbl, r);
		
		Task<Void> sleeper = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                }
                return null;
            }
        };
        sleeper.setOnSucceeded(new EventHandler<WorkerStateEvent>() {
            @Override
            public void handle(WorkerStateEvent event) {
            	int x = ((int)btn.getLayoutX() - (int)btn0.getLayoutX());
            	if(x<0)
            	{
            	btn0.setLayoutX(btn0.getLayoutX() - 10);	
            	}
            	else if(x == 0 )
            	{
            		
            	}
            	else
            	{
            		btn0.setLayoutX(btn0.getLayoutX() + 10);	
            	}
            	int y = ((int)btn.getLayoutY() - (int)btn0.getLayoutY());
            	if(y<0)
            	{
            		btn0.setLayoutY(btn0.getLayoutY() - 10);	
            	}
            	else if(x == 0 )
            	{
            		
            	}
            	else
            	{
            		btn0.setLayoutY(btn0.getLayoutY() + 10);	
            	}
            }
        });
        new Thread(sleeper).start();
    }
	public static void newGame(final Stage stage, final Button btn, final Button btn0, final Button btn1)
	{
		stage.setTitle("New Game");	

		btn.setText("Easy");
		btn.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				try {
					Game(stage, btn, btn0);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});

		btn0.setText("Medium");
		btn0.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
			}
		});

		btn1.setText("Hard");
		btn1.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event) {
			}
		});

		Group root = new Group();
		btn1.setLayoutX(100);
		root.getChildren().add(btn);
		root.getChildren().add(btn0);
		root.getChildren().add(btn1);
		stage.setScene(new Scene(root, 300, 250));
		stage.show();
	}

}
