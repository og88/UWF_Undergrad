#include <stdio.h>
#include "Parse.c"

//typedef struct PARAM
//{
//	char *inputRedirect;           /* file name or NULL */
//	char *outputRedirect;          /* file name or NULL */
//	int  background;               /* either 0 (false) or 1 (true)*/
//	int  argumentCount;            /* number of tokens in argument vector */
//	char *argumentVector[MAXARGS]; /* array of strings */
//}Param_t;


int myShell()
{
	pid_t pidc;                  //Child pid number
	int status = 0;              //Status returned by child. used in wait
	while (status == 0)          //Status will return 0 if exec runs currectly. If user inputs "exit" int to command line,
	{                            //The program will end.
		if((pidc = fork()) < 0)  //Checks to make sure our fork() runs
		{
			perror("fork failure");
			exit(1);
		}

		if(pidc == 0)
		{
			Param_t p1 = param();
			printf("%s", p1.argumentVector[0]);
			execvp(p1.argumentVector[0],p1.argumentVector);

			/*These are the if else statements that run the appropriate actions the user asks for.
	 /* They all work in similar ways.*/
			/*if (strcmp(params[0],"ls") == 0)
			{
				execvp("ls",params);
			}
			else if(strcmp(params[0], "cp") == 0)
			{
				execvp("cp",params);
			}
			else if(strcmp(params[0], "man") == 0)
			{
				execvp("man",params);
			}
			else if(strcmp(params[0], "pwd") == 0)
			{
				execvp("pwd",params);
			}

			else if(strcmp(params[0], "cd") == 0)
			{
				//int chdir(params[1]);
			}
			else if(strcmp(params[0], "mkdir") == 0)
			{
				execvp("mkdir",params);
			}
			else if(strcmp(params[0], "mv") == 0)
			{
				execvp("mv",params);
			}
			else if(strcmp(params[0], "chmod") == 0)
			{
				execvp("chmod",params);
			}
			else if(strcmp(params[0], "chown") == 0)
			{
				execvp("chown",params);
			}
			else if(strcmp(params[0], "rm") == 0)
			{
				execvp("rm",params);
			}
			else if(strcmp(params[0], "cat") == 0)
			{
				execvp("cat",params);
			}
			else if(strcmp(params[0], "grep") == 0)
			{
				execvp("grep",params);

			}
			else if(strcmp(params[0], "wget") == 0)
			{
				execvp("wget",params);
			}
			else if(strcmp(params[0], "tail") == 0)
			{
				execvp("tail",params);
			}
			else if(strcmp(params[0], "w") == 0)
			{
				execvp("w",params);
			}
			else if(strcmp(params[0], "exit") == 0)
			{
				exit(1);
			}
			else
			{
				printf("invalid Command\n");
				_exit(0);
			}
			 */
		}
		else
		{
			wait(&status);
		}
	}
}
