#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "Parse.h"


int main(int argc, char* argv[])
{
	pid_t pidc;  //Child pid number
	int status = 0;              //Status returned by child. used in wait
	int background = 0, debug = 0, i = 0;
	while((background == 0) && (i < argc))
	{
		if(strcmp(argv[i], "&") == 0)
		{
			background = 1;
		}

		i++;
	}
	while (status == 0)          //Status will return 0 if exec runs currectly. If user inputs "exit" int to command line,
	{                            //The program will end.
		if((pidc = fork()) < 0)  //Checks to make sure our fork() runs
		{
			perror("fork failure");
			exit(1);
		}

		if(pidc == 0)
		{
			Param_t* p1 = malloc(sizeof(Param_t));
			p1 = param();


			if(p1->inputRedirect)
			{
				printf("input is: %s\n", p1->inputRedirect);
				freopen(p1->inputRedirect, "r", stdin);
			}
			if(p1->outputRedirect)
			{
				freopen(p1->outputRedirect, "w", stdout);
			}

			if(p1->background)
			{
				printf("wait\n");
				int parent = getpid();
				fork();
				if(parent == getpid())
				{
					exit(0);
				}
			}
			i = 0;
			while((debug == 0) && (i < argc))
			{
				if(strcmp(argv[i], "-Debug") == 0)
				{
					printParams(p1);
				}

				i++;
			}

			//These are the if else statements that run the appropriate actions the user asks for.
				 // They all work in similar ways.
			if(strcmp(p1->argumentVector[0], "exit") == 0)
			{
				_exit(1);
			}
			else if(strcmp(p1->argumentVector[0], "cd") == 0)
			{
				printf("cd");
				_exit(0);
			}
			else
			{
				execvp(p1->argumentVector[0],p1->argumentVector);
				printf("%s", p1->argumentVector[0]);
				exit(2);
			}

		}
		else
		{
			wait(&status);
			if(WEXITSTATUS(status) == 2)
			{
				printf(" is not a valid command\n");
				status = 0;
			}
			else if(WEXITSTATUS(status) == 0)
			{
				status = 0;
			}
			//printf("\n status is %i\n",	WEXITSTATUS(status));
		}
	}
	return 0;
}
