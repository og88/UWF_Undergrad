import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSetMetaData;


public class Lab10
{
	private static final String driver = "org.apache.derby.jdbc.EmbeddedDriver";
    private static final String protocol = "jdbc:derby:";

	public static void main(String[] args)
	{
		// First load the embedded driver
		try
		{
			Class.forName(driver).newInstance();
			System.out.println("Loaded the embedded driver.");
		}
		catch (Exception err)  // Must catch ClassNotFoundException, InstantiationException, IllegalAccessException
		{
			System.err.println("Unable to load the embedded driver.");
			err.printStackTrace(System.err);
			System.exit(0);
        }

        // Create a new database and connect to it
        // In the connection string we could also supply a username and password
        // if applicable by adding "user=username;password=dbuserpwd".
        // This will create a folder named "BookDatabase" in the
        // program's directory that contains the database files
        String dbName = "ClassDatabase";
        Connection conn = null;
        try
        {
			System.out.println("Connecting to and creating the database...");
        	conn = DriverManager.getConnection(protocol + dbName + ";create=true");
			System.out.println("Database created.");

			// Create a statement object for running SQL statements
			Statement s = conn.createStatement();

			// Create a table named "names" with three fields.
			// One is for author, which holds a string up to 50 characters.
			// author_id is a numeric ID number for each author.
			// url is a varchar, which is a String that holds 80 characters
			s.execute("CREATE TABLE class" +
					  "(name varchar(50), Instructor varchar(50), classCode int, dept varchar(50))");
			System.out.println("Created 'Class' table.");

			// Add some sample data.  Would be more efficient to use prepareStatement
			// but leave off for simplicity
			System.out.println("Inserting class information.");
			s.execute("INSERT INTO class " +
				"VALUES ('Physical Science', 'Adams, Douglas', 3056, 'Science')");
			s.execute("INSERT INTO class " +
				"VALUES ('University Physics','Gounch, Simmon', 2049, 'Physics')");
			s.execute("INSERT INTO class " +
				"VALUES ('Data Structors I','Coffey, John', 3110, 'Computer Science')");

			System.out.println("Authors inserted.");

			conn.close();
		}
		catch (SQLException err)
		{
			System.err.println("SQL error.");
			err.printStackTrace(System.err);
			System.exit(0);
		}
	}
}