#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "Parse.h"
void alt();

int main(int argc, char* argv[])
{
	pid_t pid;                    //PID number
	int status = 0;               //Status returned by child. used in wait
	int debug = 0, i;             //debug indicate whether we need to run printParam. i is used as a counter for loops.
	int input = 0;



i = 0;
	while((input == 0) && (i < argc))          //loops until debug is found, or we run out of arguments
	{
		if(argv[i][0] == '<')
		{
			input = 1;
			printf("\n\n\nInput works %i\n\n\n", i);
			if(fork() == 0)
			{
				FILE* file = fopen(argv[i] + 1, "r");
				alt(file);
				exit(0);

			}
			else
			{
			wait(NULL);
			argv[i] = NULL;
			printf("wait complete %i\n\n", i);
			status = 1;
			}
		}

		i++;
	}
	while (status != 1)          //Status will return 0 if exec runs currectly. If user inputs "exit" int to command line,
	{                            //The program will end.


		Param_t* p1 = malloc(sizeof(Param_t));   //creates a Param_t object named p1
		p1 = parseTokens();                            //set p1 to the return value of param()

		if((pid = fork()) < 0)  //Checks to make sure our fork() runs
		{
			perror("fork failure");  //If fork fails, it will tell the user.
			exit(1);
		}

		if(pid == 0)             //If statement checks to see if the current process is a child process
		{

			if(p1->inputRedirect)                    //if statement to see if an inputRedorect is needed
			{
				freopen(p1->inputRedirect, "r", stdin);
			}
			if(p1->outputRedirect)                    //if statement to see if an outputRedorect is needed
			{
				freopen(p1->outputRedirect, "w", stdout);
			}


			i = 0;                                     //i is used as acounter to find debug
			while((debug == 0) && (i < argc))          //loops until debug is found, or we run out of arguments
			{
				if(strcmp(argv[i], "-Debug") == 0)
				{
					printParams(p1);                    //prints debug information if debug is found
				}

				i++;
			}

			//These are the if else statements that run the appropriate actions the user asks for.
			//files run with execvp. exit is the terminating command, so it exits with value 1
			//if the process fails because of an invalid command, the proccess exits with 2, to indicate invalid command
			if(strcmp(p1->argumentVector[0], "exit") == 0)
			{
				_exit(2);
			}
			else if(strcmp(p1->argumentVector[0], "cd") == 0)
			{
				printf("cd");
				_exit(0);
			}
			else
			{
				execvp(p1->argumentVector[0],p1->argumentVector);
				exit(1);
			}
		}
		else
		{
			if(!p1->background)                        //Checks to see if process needs to run in the background
			{

				wait(&status);                                //waits for children to die. Inputs exit values into status
				if(WEXITSTATUS(status) == 1)                  //if exit is 2, the program warns the user of an invalid command
				{
					printf("Error: invalid command\n");
					status = 0;                               //status is set to 0 to conitnue the loop
				}
				else if(WEXITSTATUS(status) == 0)
				{
					status = 0;                               //If exit status is 0, then status is set to 0
				}
				else if(WEXITSTATUS(status) == 2)
				{
					status = 1;
				}
			}
		}                                                 //entering command exit will return a non 0 value, which will end the loop.
	}
	return 0;
}

void alt(FILE* fp)
{

	int count = 0,status;

	fgets(line, sizeof(line), fp);
	//while(fgets(line, sizeof(line), fp))
	//{
		int pid = fork();
		if(pid == 0)
		{
			printf("$ ");
			token = strtok(line, " \t\n");
			int i = 0;
			while(token != NULL)
			{
				params[count][i] = token;
				token = strtok(NULL, " \t\n");
				printf("\n%s\n", params[count][i]);
				i++;
			}
			if(strcmp(params[count], "ls"))
			{
				printf("\n\n1\n\n");
			}
			execvp(params[count][0], params[count]);
		}
		else
		{
		wait(&status);
		printf("\nParent waited\n");
		count++;
		}
	//}
	printf("\n%i\n", count);
	fclose(fp);
}
